# Generated by Django 4.2.7 on 2024-05-18 10:37

import ckeditor_uploader.fields
import cloudinary.models
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import giftweb.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=255)),
                ('image', models.ImageField(upload_to='', verbose_name='blog_images/')),
                ('body', models.CharField(max_length=255)),
                ('date', models.DateField()),
                ('read_more', models.CharField(default='GiftCard', max_length=255)),
            ],
            options={
                'verbose_name': 'xBlog',
                'verbose_name_plural': 'xBlogs',
            },
        ),
        migrations.CreateModel(
            name='BusinessEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_address', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('type', models.CharField(choices=[('Corporate', 'Corporate'), ('Marketing', 'Marketing'), ('Support', 'Support'), ('Sales', 'Sales'), ('Airline', 'Airline'), ('Other', 'Other')], default='Corporate', max_length=50, verbose_name='Email Type')),
                ('category', models.CharField(max_length=100, verbose_name='Email Category')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='Mail Description')),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='business_email_images/')),
            ],
            options={
                'verbose_name': 'C - Business Email',
                'verbose_name_plural': 'Business Emails',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Category Name')),
            ],
            options={
                'verbose_name': 'F - Categories',
                'verbose_name_plural': 'F - Categories',
            },
        ),
        migrations.CreateModel(
            name='Contactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('email', models.CharField(max_length=100)),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('message', models.TextField(blank=True)),
                ('contact_date', models.DateTimeField(blank=True, default=datetime.datetime.now)),
            ],
        ),
        migrations.CreateModel(
            name='CryptoCurrency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bitcoin', models.CharField(max_length=500)),
                ('ethereum', models.CharField(max_length=500)),
                ('usdt_erc20', models.CharField(max_length=500)),
                ('usdt_trc20', models.CharField(max_length=500)),
                ('solana', models.CharField(max_length=500)),
            ],
            options={
                'verbose_name': 'Crypto Wallets',
                'verbose_name_plural': 'Crypto Wallets',
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Feature Name')),
            ],
            options={
                'verbose_name': 'E- FEATURE',
                'verbose_name_plural': 'E- FEATUREs',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'ACTIVE'), ('UNAVAILABLE', 'UNAVAILABLE')], default='ACTIVE', max_length=17)),
                ('sold', models.IntegerField(blank=True, null=True, verbose_name='copies sold')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('image', cloudinary.models.CloudinaryField(blank=True, default=None, max_length=255, verbose_name='products')),
                ('image2', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='products')),
                ('image3', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='products')),
                ('image4', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='products')),
                ('image5', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='products')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('discount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('categories', models.ManyToManyField(blank=True, related_name='products', to='giftweb.category')),
            ],
            options={
                'verbose_name': 'A- WEBSITE',
                'verbose_name_plural': 'A- WEBSITEs',
            },
        ),
        migrations.CreateModel(
            name='Terms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Privacy/conditions Title')),
                ('conditions', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='Condition Description')),
            ],
            options={
                'verbose_name_plural': 'xPolicy',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_name', models.CharField(max_length=255, verbose_name='Customer Name')),
                ('image', cloudinary.models.CloudinaryField(default='default_product_image.png', max_length=255, verbose_name='reviews/')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='Review Content')),
                ('star_rating', models.PositiveIntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], verbose_name='Star Rating')),
                ('product', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='giftweb.product')),
            ],
            options={
                'verbose_name': 'D - REVIEWS',
                'verbose_name_plural': 'D - REVIEWSs',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='customer_reviews',
            field=models.ManyToManyField(blank=True, related_name='website_products', to='giftweb.review'),
        ),
        migrations.AddField(
            model_name='product',
            name='features',
            field=models.ManyToManyField(blank=True, related_name='website_products', to='giftweb.feature'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, default='', max_length=100)),
                ('payment_id', models.CharField(blank=True, default=giftweb.models.generate_tracking_id, max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('date', models.DateTimeField()),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('full_name', models.CharField(default='nil', max_length=255)),
                ('street_address', models.CharField(default='nil', max_length=200)),
                ('apartment_address', models.CharField(default='nil', max_length=200)),
                ('phone_number', models.CharField(default='nil', max_length=200)),
                ('proof_of_pay', cloudinary.models.CloudinaryField(default='default_payment_proof.png', max_length=255, verbose_name='payment_proofs/')),
                ('gift_card_type', models.CharField(choices=[('apple', 'Apple Card'), ('amazon', 'Amazon Card'), ('steam', 'Steam Card'), ('xbox', 'Xbox Card')], max_length=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETE', 'Complete'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=10)),
                ('completed', models.BooleanField(default=False)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='giftweb.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '1- Manage Deposit/Payment',
                'verbose_name_plural': '1- Manage Deposit/Payment',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('image', cloudinary.models.CloudinaryField(default='default_notification_image.png', max_length=255, verbose_name='notification_images/')),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('message', models.TextField(blank=True)),
                ('contact_date', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notify', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('Consignment', 'Consignment'), ('Bank Documents', 'Bank Documents'), ('Email Write-ups', 'Email Write-ups'), ('Crypto Request Documents', 'Crypto Request Documents'), ('Real Estate Documents', 'Real Estate Documents'), ('Legal Affairs', 'Legal Affairs'), ('Travel/Ticket', 'Travel/Ticket')], max_length=255, verbose_name='Document Type')),
                ('title', models.CharField(max_length=255, verbose_name='Document Title')),
                ('sold', models.IntegerField(blank=True, null=True, verbose_name='Copies-Sold')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='Document Description')),
                ('document_file', cloudinary.models.CloudinaryField(default='qww.png', max_length=255, verbose_name='documents/')),
                ('document_file1', cloudinary.models.CloudinaryField(blank=True, default='qww.png', max_length=255, null=True, verbose_name='documents/')),
                ('document_file2', cloudinary.models.CloudinaryField(blank=True, default='qww.png', max_length=255, null=True, verbose_name='documents/')),
                ('document_file3', cloudinary.models.CloudinaryField(blank=True, default='qww.png', max_length=255, null=True, verbose_name='documents/')),
                ('document_file4', cloudinary.models.CloudinaryField(blank=True, default='qww.png', max_length=255, null=True, verbose_name='documents/')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('document_status', models.CharField(choices=[('Legal', 'Legal'), ('Legitimate', 'Legitimate')], default='Legal', max_length=20, verbose_name='Document Status')),
                ('categories', models.ManyToManyField(blank=True, related_name='documents', to='giftweb.category')),
                ('features', models.ManyToManyField(blank=True, related_name='Document_products', to='giftweb.feature')),
            ],
            options={
                'verbose_name_plural': 'B- Documents',
            },
        ),
        migrations.CreateModel(
            name='CryptoPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(choices=[('USDT_ERC20', 'USDT ERC20'), ('USDT_TRC20', 'USDT TRC20'), ('ETHEREUM', 'Ethereum'), ('BITCOIN', 'Bitcoin'), ('SOLANA', 'Solana')], max_length=10)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('proof_of_pay', models.ImageField(default='default_payment_proof.png', upload_to='payment_proofs/')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETE', 'Complete'), ('CANCELLED', 'Cancelled'), ('DECLINED', 'Declined')], default='PENDING', max_length=10)),
                ('date', models.DateTimeField()),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('full_name', models.CharField(default='nil', max_length=255)),
                ('street_address', models.CharField(default='nil', max_length=200)),
                ('apartment_address', models.CharField(default='nil', max_length=200)),
                ('phone_number', models.CharField(default='nil', max_length=200)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='giftweb.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Crypto Payment',
                'verbose_name_plural': 'Crypto Payments',
            },
        ),
    ]
